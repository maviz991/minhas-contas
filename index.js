// index.js

// 1. Importar as dependÃªncias necessÃ¡rias
import express from 'express';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';

// 2. Inicializar o Express e o Prisma Client
const app = express();
const prisma = new PrismaClient();

// 3. Configurar os Middlewares
// Middleware para o Express entender JSON no corpo das requisiÃ§Ãµes
app.use(express.json());
// Middleware para permitir que outras origens (nosso futuro app) acessem esta API
app.use(cors());

// --- DEFINIÃ‡ÃƒO DAS ROTAS DA API ---

/**
 * ROTA GET /transactions
 * Retorna todas as transaÃ§Ãµes cadastradas no banco de dados.
 */
app.get('/transactions', async (req, res) => {
  try {
    const transactions = await prisma.transaction.findMany({
      // O 'include' faz com que os dados da conta e categoria relacionados venham junto
      include: {
        account: true,
        category: true,
      },
    });
    res.json(transactions);
  } catch (error) {
    console.error('Erro ao buscar transaÃ§Ãµes:', error);
    res.status(500).json({ error: 'NÃ£o foi possÃ­vel buscar as transaÃ§Ãµes.' });
  }
});

/**
 * ROTA POST /transactions
 * Cria uma nova transaÃ§Ã£o com base nos dados enviados no corpo da requisiÃ§Ã£o.
 */
app.post('/transactions', async (req, res) => {
  try {
    const { description, amount, type, accountId, categoryId } = req.body;

    // Simples validaÃ§Ã£o para garantir que os campos necessÃ¡rios foram enviados
    if (!description || !amount || !type || !accountId || !categoryId) {
      return res.status(400).json({ error: 'Todos os campos sÃ£o obrigatÃ³rios.' });
    }

    const newTransaction = await prisma.transaction.create({
      data: {
        description,
        amount: parseFloat(amount), // Garante que o valor seja um nÃºmero
        type,
        accountId,
        categoryId,
      },
    });

    res.status(201).json(newTransaction); // 201 Created Ã© o status ideal para criaÃ§Ã£o
  } catch (error) {
    console.error('Erro ao criar transaÃ§Ã£o:', error);
    res.status(500).json({ error: 'NÃ£o foi possÃ­vel criar a transaÃ§Ã£o.' });
  }
});

// --- INICIALIZAÃ‡ÃƒO DO SERVIDOR ---
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor rodando em http://localhost:${PORT}`);
});
